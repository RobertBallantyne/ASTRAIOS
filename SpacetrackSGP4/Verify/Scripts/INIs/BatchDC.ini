########################################
#                                      #
#       VERDICT INI FILE FORMAT        #
#                                      #
########################################



[FILE TYPE]
;----------------------------------------------------------------------------------------

Catch string # = <start position 1>:<"[@]string literal"> [, <start position 2>:<"string literal">]

Discriminator ID line # = <start position 1>:<"string literal"> [, <start position 2>:<"string literal">]

Discriminator tokens line # = [!]<field name>:<start position>-<data type><width>[.decimal places]

Data ID line # = <start position 1>:<"string literal"> [, <start position 2>:<"string literal">]

Data tokens line # = [@]<field name>:<start position>-<data type><width>[.decimal places] [, ...]

Unmatching lines limit =  this field has not been used yet

Search lines limimt =  max # of lines being searched to find a match in secondary file.
                       if no match found, move to the next discriminator line in primary file

Print extra lines = true/false turn on/off printing extra lines in the primary
                    or secondary file

;----------------------------------------------------------------------------------------
+ FILE TYPE: file type of the input file. It needs to be placed in square brackets and
             needs to be unique among other FILE TYPE in the same INI file

+ Catch string #: (Catch string 1 -> Catch string 20)
	Any strings in the input file that match this description will be captured
    and printed in the output file. 

+ Discriminator ID line #: (Discriminator ID line 1 -> Discriminator ID line 10)
	User enters descriptions of how to identify this discrimnator line. When a line matches 
	this description, its values will be tokenized as indicated in the correpondent 
	"Discriminator tokens line #"

+ Discriminator tokens line #: (Discriminator tokens line 1 -> Discriminator tokens line 10)
	Specify how discriminator tokens are laid out in the line, their data types, width,...

+ Data ID line #: (Data ID line 1 -> Data ID line 20)
	User enters descriptions of how to identify this data line. When a line matches 
	this description, its values will be tokenized as indicated in the correpondent 
	"Data tokens line #"

+ Data tokens line #: (Data tokens line 1 -> Data tokens line 20)
	Specify how data tokens are laid out in the line, their data types, width,...

+ start position: column number when the program will read value of a field

+ string literal: any string literal that used to identify a line

	User should choose any positions and strings that can uniquely identify that data or 
	discrimnator line. Suggest using '.' in floating numbers to identify a line

+ field name: must be a unique name within an entry. Name can be any characters that is
              not longer than 20 charcter length

+ data type: there are only three data types being used in the program. They are:
			 - D for double
		     - S for string
	         - I for integer

+ data width: the width of the data field. The program will extract the data value 
              starting from the column <start position> and stopping at the column 
			  <start position> + <width>

+ decimal places: only used for double number fields to indicate how many decimal places
                  the current field have. If the same field has different number of
				  decimal places, the less decimal places will be used in comparison


+ Special symbols used in "Catch string #":
  @: must be placed first in a string literal to tell the program that this is a block 
     of lines that need to be catched. This block starts at the first line that matches 
	 the first input and stops at the line that matches the second input

  Example: 

  Catch string 1 = 4:"@Force_Model:", 6:"@PlanetPlutoFlag"

  ...will catch a string block starting from the line that, at position 4, matches string 
  "Force_Model", and stops at the line that, at position 6, matches string "PlanetPlutoFlag"

+ Special symbols used in "Discriminator tokens line #":
  !: must be place right before a field name to indicate that this field is a data token 
     so that its value will be extracted and compared

  Example:

  Discriminator tokens line 1 = SAT:2-S5, TIME:9-S12, !SSSSS:22-D10.7, !DISTANCE:36-D7.3

  ... tells the program to match field SAT and TIME first and after that extract and 
  compare values of SSSSS and DISTANCE as indicated by ! symbol 


+ Special symbols used in "Data tokens line #":
  @: indicate the field name right after it is a pinned field. It is used as a discriminator 
     token (matching field) and will be shown in the output file

  Example:

  Data tokens line 1 = @TIME:6-S13, X:23-D13.7, Y:39-D14.7, Z:57-D13.7, XDOT:77-D10.7, YDOT:94-D10.7, ZDOT:111-D10.7

  ... tells the program that data lines need to match this TIME field first and after that the
  data tokens in this line are extracted and compared. If there is any discrepancies between
  these two data lines, TIME will be printed first following those that are different

+ Special symbols used in a string literal
  !: must be placed fisrt in a string literal to indicate that the following string is 
     a string pattern instead of a string literal. 

  a = alpha [a-z, A-Z]
  n = number [0-9]
  * = anything except blank

  Example:

  7 - ELEMENT CORRECTED THE FOLLOWING ORBITAL ELEMENTS -  L      N    BTERM  AGOM   CHI    PSI     AF     AG
                                                          1      1      1      0      1      1      1      1
  
  There is no way one can identify the second line above. The nubmers are varied but the 
  locations where these numbers located are fixed. In short, we can only identify the 
  pattern of this line. We can using symbol ! and these character (a, n, and *) to specify
  a pattern like this:

  Data ID line 2 = 59:"!n      n      n"

  Note: we only use the first three positions to uniquely identify this line which starts
  at column 59 with a number, spaces, a number, spaces, and a number again.


********************************************************************************



[DC1]
;---------------------------------------
Catch string 1 = 5:"- ELEMENT"
Catch string 2 = 59:"!n      n      n"
Catch string 3 = 
Catch string 4 = 
Catch string 5 = 
Catch string 6 = 
Catch string 7 = 
Catch string 8 = 
Catch string 9 = 
Catch string 10 = 
    
Discriminator ID line 1 = 6:"-ELT"
Discriminator ID line 2 = 1:"SATELLITE NO.", 83:"SHEET"
;Discriminator ID line 3 = 13:"/", 25:"."
Discriminator ID line 4 = 
Discriminator ID line 5 =

Discriminator tokens line 1 = ELT:6-S4
Discriminator tokens line 2 = SATNUM:15-S5, PASSSHEET:68-S24, !TIMEEPOCH:108-S17
;Discriminator tokens line 3 = STRING:1-S29, !DELTAT:43-D7.4, !BETADEG:53-D7.4, !DELTAH:64-D6.3, !VECMAG:117-D7.3
Discriminator tokens line 4 =
Discriminator tokens line 5 =

Data ID line 1 = 13:"/", 25:"."
Data ID line 2 = 7:".", 55:"."
Data ID line 3 = 6:"(", 11:")"
Data ID line 4 = 1:"EPOCH REV NUMBER ="
Data ID line 5 = 15:".", 18:"DAY"

Data tokens line 1 = @STRING:1-S29, DELTAT:43-D7.4, BETADEG:53-D7.4, DELTAH:64-D6.3, VECMAG:117-D7.3
Data tokens line 2 = 8ELT:4-D7.3, UNWTD:53-D6.3
Data tokens line 3 = @ELMS:1-S5, EPODAY:13-D12.8, AEARTHRADII:27-D10.8, IDEG:50-D7.4, NODEDEG:59-D8.4, OMEGADEG:69-D8.4, MDEG:79-D8.4, NREVDAY:90-D10.8, BTERM:102-D10.8, PERIODMIN:115-D5.1, AGOM:122-D10.8
Data tokens line 4 = EPOREVNUM:21-I3, PERIGEE:38-D6.1, APOGEE:60-D7.1, EPOCH:99-S15
Data tokens line 5 = @CRITERIA:3-S8, NEWEPOCH:14-D3.1, NORES:25-I3, %RES:33-I3, RMS:41-I2, OBSPAN:50-D4.1, D_PLAN:59-D5.3, D_ABAR:72-D6.4, D_N:83-D8.2, D_BTERM:104-D9.3


Unmatching lines limit = 1000
Search lines limit = 1000

********************************************************************************


[DC]
;---------------------------------------
Discriminator ID line 1 = 1:"SATELLITE NO.", 60:"ITERATION NO."
Discriminator ID line 2 = 77:"UB1P"
Discriminator ID line 3 = 74:"TMDAT2P"
Discriminator ID line 4 = 1:"1", 24:".", 63:"0"
Discriminator ID line 5 = 1:"2", 12:".", 21:"."

Discriminator tokens line 1 = SAT:15-I5, ITERNUM:74-I2
Discriminator tokens line 2 = !POSX:1-D12.4, !POSY:13-D12.4, !POSZ:25-D12.4, !VELX:37-D13.4, !VELY:50-D13.4, !VELZ:63-D13.4
Discriminator tokens line 3 = !BTERM:44-D10.8, !RADPRES:54-D10.8, !OUTGAS:64-D10.8 
Discriminator tokens line 4 = !EPOCH:19-S14
Discriminator tokens line 5 = !INCLI:9-D7.4, !RA:18-D8.4, !ECC:27-I7, !OMG:35-D8.4, !MA:44-D8.4, !MM:53-D11.9

Data ID line 1 = 13:"/", 25:"."
Data ID line 2 = 59:"!n      n      n"
Data ID line 3 = 7:".", 55:"."
Data ID line 4 = 6:"(", 11:")"
Data ID line 5 = 1:"EPOCH REV"
Data ID line 6 = 18:"DAY", 44:"KM"
Data ID line 7 = 
Data ID line 8 = 
Data ID line 9 = 


Data tokens line 1 = @STRING:11-S18, DELTAT:41-D8.4, BETADEG:52-D8.4, DELTAH:63-D10.3, RNGKM:76-D10.3, RADEG:89-D8.3, DECDEG:100-D8.3, RR:111-D8.4, VECMAG:120-D11.3
Data tokens line 2 = ORBITELT:59-S50
Data tokens line 3 = 7ELT:3-D11.3
Data tokens line 4 = EPODAY:14-D11.8, A:27-D10.8, E:38-D9.7, I:50-D7.4, NODE:60-D7.4, OMEGA:69-D8.4, M:79-D8.4, N:89-D11.8, BTERM:102-D10.8, PERIOD:116-D4.1
Data tokens line 5 = EPOREVNO:22-I2, PERIGEE:39-I3, APOGEE:62-I3, EPOTIME:99-S15
Data tokens line 6 = NEWEPO:14-D3.1, NORES:25-I3, %RES:33-I3
Data tokens line 7 = 
Data tokens line 8 = 
Data tokens line 9 = 

Unmatching lines limit = 120
Search lines limit = 120

********************************************************************************

